{"version":3,"sources":["apiCoursesController.js"],"names":["Course","require","getCourses","req","res","find","exec","courses","json","status","message","getCourseById","courseId","params","id","findById","course","addReview","body","author","rating","reviewText","newReview","timestamp","Date","reviews","push","save","module","exports"],"mappings":"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","sourcesContent":["const Course = require(\"../models/course\");\r\n\r\n// Function to get all courses\r\nconst getCourses = async (req, res) => {\r\n  try {\r\n    const courses = await Course.find().exec();\r\n    res.json(courses); // Using .json() for consistent API responses\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Error retrieving courses: \" + error });\r\n  }\r\n};\r\n\r\n// Function to get a course by its ID\r\nconst getCourseById = async (req, res) => {\r\n  const courseId = req.params.id;\r\n\r\n  try {\r\n    const course = await Course.findById(courseId).exec();\r\n    if (!course) {\r\n      return res.status(404).json({ message: \"Course not found\" });\r\n    }\r\n    res.json(course); // Consistent use of .json()\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Error retrieving course: \" + error });\r\n  }\r\n};\r\n\r\n// Function to add a review to a specific course\r\nconst addReview = async (req, res) => {\r\n  const courseId = req.params.id;\r\n  const { author, rating, reviewText } = req.body;\r\n\r\n  try {\r\n    const course = await Course.findById(courseId).exec();\r\n    if (!course) {\r\n      return res.status(404).json({ message: \"Course not found\" });\r\n    }\r\n\r\n    const newReview = {\r\n      author,\r\n      rating,\r\n      reviewText,\r\n      timestamp: new Date(),\r\n    };\r\n\r\n    // Add the new review to the course's reviews array\r\n    course.reviews.push(newReview);\r\n    await course.save(); // Save the updated course\r\n\r\n    // Respond with success\r\n    res.status(201).json({ message: \"Review added successfully\" });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Error adding review: \" + error });\r\n  }\r\n};\r\n\r\n// Export the functions\r\nmodule.exports = {\r\n  getCourses,\r\n  getCourseById,\r\n  addReview, // New function added here\r\n};"],"file":"apiCoursesController.dev.js"}
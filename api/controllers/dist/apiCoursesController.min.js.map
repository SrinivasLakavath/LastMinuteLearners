{"version":3,"sources":["apiCoursesController.js"],"names":["Course","require","getCourses","req","res","courses","regeneratorRuntime","async","_context","prev","next","awrap","exec","sent","json","t0","status","message","stop","getCourseById","courseId","course","_context2","params","id","findById","abrupt","addReview","_req$body","author","rating","reviewText","newReview","_context3","body","timestamp","Date","reviews","push","save","module","exports"],"mappings":"aAAA,IAAMA,OAASC,QAAQ,oBAGjBC,WAAa,SAAOC,EAAKC,GAAZ,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAK,MAAbT,OAAAA,OAAaU,QAAA,KAAA,EAAbV,EAAaM,EAAAK,KAAAT,EAAAU,KAAAT,GAAAG,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAAF,EAAAC,KAAA,EAAAD,EAAAO,GAAAP,EAAA,MAAA,GAAAJ,EAAAY,OAAA,KAAAF,KAAA,CAAAG,QAAA,6BAAAT,EAAAO,KAAA,KAAA,GAAA,IAAA,MAAA,OAAAP,EAAAU,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MAAAC,cAAA,SAAAhB,EAAAC,GAAA,IAAAgB,EAAAC,EAAA,OAAAf,mBAAAC,MAAA,SAAAe,GAAA,OAAA,OAAAA,EAAAb,KAAAa,EAAAZ,MAAA,KAAA,EAAA,OAWXU,EAAWjB,EAAIoB,OAAOC,GAXXF,EAAAb,KAAA,EAAAa,EAAAZ,KAAA,EAAAJ,mBAAAK,MAGNN,OAAUoB,SAAAL,GAAAR,QAHJ,KAAA,EAAA,GAGfR,EAHekB,EAAAT,KAAA,CAAAS,EAAAZ,KAAA,EAAA,MAAA,OAAAY,EAAAI,OAAA,SAAAtB,EAAAY,OAAA,KAAAF,KAAA,CAAAG,QAAA,sBAAA,KAAA,EAkBfb,EAAIU,KAAKO,GAlBMC,EAAAZ,KAAA,GAAA,MAAA,KAAA,GAAAY,EAAAb,KAAA,GAAAa,EAAAP,GAAAO,EAAA,MAAA,GAAAlB,EAAAY,OAAA,KAAAF,KAAA,CAAAG,QAAA,4BAAAK,EAAAP,KAAA,KAAA,GAAA,IAAA,MAAA,OAAAO,EAAAJ,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAyBbS,UAAY,SAAOxB,EAAKC,GAAZ,IAAAgB,EAAAQ,EAAAC,EAAAC,EAAAC,EAAAV,EAAAW,EAAA,OAAA1B,mBAAAC,MAAA,SAAA0B,GAAA,OAAA,OAAAA,EAAAxB,KAAAwB,EAAAvB,MAAA,KAAA,EAAA,OAzBCU,EAAAjB,EAAAoB,OAAAC,GAyBDI,EAzBCzB,EAAA+B,KAAAL,EAyBDD,EAzBCC,OAAAC,EAyBDF,EAzBCE,OAAAC,EAyBDH,EAzBCG,WAyBDE,EAAAxB,KAAA,EAAAwB,EAAAvB,KAAA,EAAAJ,mBAAAK,MAzBCX,OAAAyB,SAAAL,GAAAR,QAyBD,KAAA,EAAA,GAzBCS,EAyBDY,EAAApB,KAAA,CAAAoB,EAAAvB,KAAA,EAAA,MAAA,OAAAuB,EAAAP,OAAA,SAhBlBtB,EAAAY,OAAA,KAAAF,KAAA,CAAAG,QAAA,sBAgBkB,KAAA,EAAA,OAfZE,EAAgB,CAAAU,OAAAA,EAAAC,OAAAA,EAAAC,WAAAA,EAAAI,UAAA,IAAAC,MAAAf,EAAAgB,QAAAC,KAAAN,GAeJC,EAAAvB,KAAA,GAAAJ,mBAAAK,MAfIU,EAAAkB,QAeJ,KAAA,GAXRlB,EAAAA,OAAAA,KAJYP,KAAA,CAAAG,QAAA,8BAeJgB,EAAAvB,KAAA,GAAA,MAAA,KAAA,GAAAuB,EAAAxB,KAAA,GAAAwB,EAAAlB,GAAAkB,EAAA,MAAA,GAfI7B,EAAAY,OAKbK,KALaP,KAAA,CAAAG,QAAA,wBAAAgB,EAAAlB,KAeJ,KAAA,GAAA,IAAA,MAAA,OAAAkB,EAAAf,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAfIsB,OAAAC,QAAA,CAMcxB,WAAAA,WAAFE,cAAAA,cAyChCQ,UAAAA","file":"apiCoursesController.min.js","sourcesContent":["const Course = require(\"../models/course\");\r\n\r\n// Function to get all courses\r\nconst getCourses = async (req, res) => {\r\n  try {\r\n    const courses = await Course.find().exec();\r\n    res.json(courses); // Using .json() for consistent API responses\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Error retrieving courses: \" + error });\r\n  }\r\n};\r\n\r\n// Function to get a course by its ID\r\nconst getCourseById = async (req, res) => {\r\n  const courseId = req.params.id;\r\n\r\n  try {\r\n    const course = await Course.findById(courseId).exec();\r\n    if (!course) {\r\n      return res.status(404).json({ message: \"Course not found\" });\r\n    }\r\n    res.json(course); // Consistent use of .json()\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Error retrieving course: \" + error });\r\n  }\r\n};\r\n\r\n// Function to add a review to a specific course\r\nconst addReview = async (req, res) => {\r\n  const courseId = req.params.id;\r\n  const { author, rating, reviewText } = req.body;\r\n\r\n  try {\r\n    const course = await Course.findById(courseId).exec();\r\n    if (!course) {\r\n      return res.status(404).json({ message: \"Course not found\" });\r\n    }\r\n\r\n    const newReview = {\r\n      author,\r\n      rating,\r\n      reviewText,\r\n      timestamp: new Date(),\r\n    };\r\n\r\n    // Add the new review to the course's reviews array\r\n    course.reviews.push(newReview);\r\n    await course.save(); // Save the updated course\r\n\r\n    // Respond with success\r\n    res.status(201).json({ message: \"Review added successfully\" });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Error adding review: \" + error });\r\n  }\r\n};\r\n\r\n// Export the functions\r\nmodule.exports = {\r\n  getCourses,\r\n  getCourseById,\r\n  addReview, // New function added here\r\n};"]}